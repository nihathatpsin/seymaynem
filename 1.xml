<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[


<!DOCTYPE html>

<html lang="en-us">
<head>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/nihathatpsin/seymaynem@main/style.css"/>
<style>
        /* Убираем выделение по нажатию клавиш */
        canvas:focus {
            outline: none;
        }

        html, body {
            /* Убираем отступы */
            padding: 0;
            margin: 0;
            /* Отключаем скролл и лонгтап на IOS */
            overflow: hidden;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            /* Ставим высоту на 100% */
            height: 100%;
        }
    </style>
<!-- Additional head modules -->
</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas" tabindex="-1"></canvas>
</div>
<div id="loading-cover" style="display:none;">
<div id="unity-loading-bar">
<div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/nihathatpsin/seymaynem@main/logo.png"/></div>
<div id="unity-progress-bar-empty" style="display: none;">
<div id="unity-progress-bar-full"></div>
</div>
<div class="spinner"></div>
</div>
</div>
<!-- Additional body modules -->
<script>
    // Mevcut değişkenler ve ayarlar
    const hideFullScreenButton = "";
    const buildUrl = "https://cdn.jsdelivr.net/gh/nihathatpsin/seymaynem@main/Build";

    // .data dosyalarını birleştirme
    const dataParts = [
        "Driver Online Cars.data.part000.unityweb",
        "Driver Online Cars.data.part001.unityweb",
        "Driver Online Cars.data.part002.unityweb",
        "Driver Online Cars.data.part003.unityweb",
        "Driver Online Cars.data.part004.unityweb",
        "Driver Online Cars.data.part005.unityweb",
        "Driver Online Cars.data.part006.unityweb",
        "Driver Online Cars.data.part007.unityweb"
    ].map(part => buildUrl + "/" + part);

    // .data partlarını birleştir ve Blob URL döndür
    async function combineDataParts() {
        try {
            const buffers = await Promise.all(
                dataParts.map(part =>
                    fetch(part).then(response => {
                        if (!response.ok) throw new Error(`Failed to load ${part}`);
                        return response.arrayBuffer();
                    })
                )
            );
            const totalSize = buffers.reduce((sum, buffer) => sum + buffer.byteLength, 0);
            const combinedArray = new Uint8Array(totalSize);
            let offset = 0;
            for (const buffer of buffers) {
                combinedArray.set(new Uint8Array(buffer), offset);
                offset += buffer.byteLength;
            }
            const blob = new Blob([combinedArray], { type: 'application/octet-stream' });
            return URL.createObjectURL(blob);
        } catch (error) {
            console.error("Data part birleştirme hatası:", error);
            throw error;
        }
    }

    // Config ayarları
    const config = {
        dataUrl: "", // Başlangıçta boş, sonra birleştirilmiş URL atanacak
        frameworkUrl: buildUrl + "/Driver Online Cars.framework.js.unityweb",
        codeUrl: buildUrl + "/Driver Online Cars.wasm.unityweb",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "VayGame",
        productName: "Driver Online Cars",
        productVersion: "1.1.0.0"
    };

    const loaderUrl = buildUrl + "/Driver Online Cars.loader.js";

    // Mevcut diğer kodlar
    const container = document.querySelector("#unity-container");
    const canvas = document.querySelector("#unity-canvas");
    const loadingCover = document.querySelector("#loading-cover");
    const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
    const progressBarFull = document.querySelector("#unity-progress-bar-full");
    const spinner = document.querySelector('.spinner');

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
    }

    loadingCover.style.background = "url('https://cdn.jsdelivr.net/gh/nihathatpsin/seymaynem@main/background.png') center / cover";
    loadingCover.style.display = "";

    document.addEventListener('contextmenu', event => event.preventDefault());

    function FocusGame() {
        window.focus();
        canvas.focus();
    }

    window.addEventListener('pointerdown', FocusGame);
    window.addEventListener('touchstart', FocusGame);

    let StartUnityInstance;
    let myGameInstance;
    let ysdk = null;

    let environmentData = {
        language: "en",
        domain: "default_domain",
        deviceType: "desktop",
        isMobile: false,
        isDesktop: true,
        isTablet: false,
        isTV: false,
        appID: "default_app_id",
        browserLang: navigator.language || "en",
        payload: null,
        promptCanShow: false,
        reviewCanShow: false,
        platform: navigator.platform,
        browser: (function() {
            let userAgent = navigator.userAgent;
            if (userAgent.includes("YaBrowser")) return "Yandex";
            if (userAgent.includes("OPR") || userAgent.includes("Opera")) return "Opera";
            if (userAgent.includes("Firefox")) return "Firefox";
            if (userAgent.includes("MSIE") || userAgent.includes("Trident")) return "IE";
            if (userAgent.includes("Edge")) return "Edge";
            if (userAgent.includes("Chrome")) return "Chrome";
            if (userAgent.includes("Safari")) return "Safari";
            return "Other";
        })()
    };

    let cloudSaves = 'noData';
    let paymentsData = 'none';
    let playerData = 'noData';
    let player = null;
    let payments = null;
    let initGame = false;
    let nowFullAdOpen = false;

    function GetPayments() { console.warn("GetPayments is not implemented"); return Promise.resolve("none"); }
    function SaveCloud() { console.warn("SaveCloud is not implemented"); }
    function LoadCloud() { console.warn("LoadCloud is not implemented"); return Promise.resolve("noData"); }
    function InitPlayer() { console.warn("InitPlayer is not implemented"); return Promise.resolve("noData"); }

    function FullAdShow() {
        try {
            if (!nowFullAdOpen) {
                nowFullAdOpen = true;
                if (initGame) {
                    myGameInstance.SendMessage("YandexGame", "OpenFullAd");
                }
                setTimeout(() => {
                    nowFullAdOpen = false;
                    if (initGame) {
                        myGameInstance.SendMessage("YandexGame", "CloseFullAd", "true");
                    }
                    FocusGame();
                }, 500);
            }
        } catch (error) {}
    }

    function RewardedShow(rewardId) {
        try {
            myGameInstance.SendMessage("YandexGame", "RewardVideo", rewardId);
            function closeRewardedAd() {
                myGameInstance.SendMessage("YandexGame", "CloseRewardVideo");
                FocusGame();
            }
            closeRewardedAd();
        } catch (error) {}
    }

    function StickyAdActivity() { console.warn("StickyAdActivity is not implemented"); }
    function Review() { console.warn("Review is not implemented"); }
    function PromptShow() { console.warn("PromptShow is not implemented"); }
    function InitLeaderboards() { console.warn("InitLeaderboards is not implemented"); }
    function GetLeaderboardScores() { console.warn("GetLeaderboardScores is not implemented"); }
    function SetLeaderboardScores() { console.warn("SetLeaderboardScores is not implemented"); }
    function ConsumePurchase() { console.warn("ConsumePurchase is not implemented"); }
    function ConsumePurchases() { console.warn("ConsumePurchases is not implemented"); }

    // Unity yükleme
    try {
        const script = document.createElement("script");
        script.src = loaderUrl;
        script.onload = async () => {
            try {
                // .data partlarını birleştir ve config.dataUrl'ye ata
                config.dataUrl = await combineDataParts();
                StartUnityInstance = function () {
                    createUnityInstance(canvas, config, (progress) => {
                        spinner.style.display = "none";
                        progressBarEmpty.style.display = "";
                        progressBarFull.style.width = `${100 * progress}%`;
                    }).then((unityInstance) => {
                        myGameInstance = unityInstance;
                        loadingCover.style.display = "none";
                        // Blob URL'yi temizle
                        URL.revokeObjectURL(config.dataUrl);
                    }).catch((message) => {
                        console.error("Unity yükleme hatası:", message);
                    });
                };
                StartUnityInstance();
            } catch (error) {
                console.error("Data birleştirme sırasında hata:", error);
            }
        };
        document.body.appendChild(script);
    } catch (error) {
        console.error("Başlatma sırasında hata:", error);
    }

    function InitGame() {
        try {
            console.log('Init Game Success');
            initGame = true;
            if (nowFullAdOpen === true && myGameInstance != null) {
                myGameInstance.SendMessage('YandexGame', 'OpenFullAd');
            }
        } catch (error) {
            console.error("InitGame sırasında hata:", error);
        }
    }

    window.addEventListener("unhandledrejection", function(event) {
        console.warn("Hata es geçildi:", event.reason);
        event.preventDefault();
    });
</script>
</body>
</html>




]]></Content>
</Module>